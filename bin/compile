#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
. bin/common

# parse args
BUILD_DIR=$(cd $1; pwd)
CACHE_DIR=$2

# home directory from perspective of SBT; we rename
# it because otherwise the project root and $HOME
# are the same, and by default .sbt has a (different)
# meaning in those two places
SBT_USER_HOME=".sbt_home"
SBT_USER_HOME_ABSOLUTE="$BUILD_DIR/$SBT_USER_HOME"
# where we put the SBT binaries
SBT_BINDIR="$SBT_USER_HOME"/bin

# chdir as sbt expects
cd $BUILD_DIR

# unpack cache
CACHED_DIRS="$SBT_USER_HOME/.ivy2 $SBT_BINDIR"
for DIR in $CACHED_DIRS; do
  rm -rf $DIR
  if [ -d $CACHE_DIR/$DIR ]; then
    mkdir -p $DIR
    cp -r $CACHE_DIR/$DIR/.  $DIR
  fi
done

if ! test -e project/build.properties; then
	echo " !      Error, your scala project must include project/build.properties and define sbt.version"
	echo " !      You must use a release verison of sbt, sbt.version=0.11.0 or greater"
        exit 1
fi

if grep -q 'sbt.version *= *0\.11\.[0-9]-RC' project/build.properties; then
	echo " !      Error, you have defined an unsupported sbt.version in project/build.properties"
	echo " !      You must use a release verison of sbt, sbt.version=0.11.0 or greater"
	exit 1
fi

if ! grep -q 'sbt.version *= *0\.11\.[0-9]$' project/build.properties; then
	echo " !      Error, you have defined an unsupported sbt.version in project/build.properties"
	echo " !      You must use a release verison of sbt, sbt.version=0.11.0 or greater"
	exit 1
fi


SBT_VERSION="0.11.0"
SBT_JAR="sbt-launch-$SBT_VERSION.jar"
SBT_PROPS="sbt-$SBT_VERSION.boot.properties"
SBT_URL="http://s3.amazonaws.com/heroku-jvm-langpack-scala/$SBT_JAR"
SBT_PROPS_URL="http://s3.amazonaws.com/heroku-jvm-langpack-scala/$SBT_PROPS"
#0.10.1 SBT_SHA1="b41d79cb2d919a0e8732fb8ef4e71347cceea90a"
#0.11.0-RC1 SBT_SHA1="85abf74a24593c2b2ea5b033ef01c47b11c04740"
SBT_SHA1="5b15ba0fc63e355d47293def4bc2e58da6f03787"
## in 0.10 start-script will depend on package, if packaging
## is required - it may not be, we can run .class files or a package-war
## instead.
SBT_TASKS="clean compile stage"


if [ ! -d .ivy2/cache ]; then
   mkdir -p .ivy2/cache
fi

if [ ! -f "$SBT_BINDIR"/"$SBT_JAR" ]; then
  mkdir -p "$SBT_BINDIR"
  cd "$SBT_BINDIR"

  ## clean up any old versions
  /bin/rm -f sbt sbt-launch-*.jar || true

  echo "-----> Building app with sbt"
  curl --silent --max-time 60 -O --location $SBT_URL

  ## some of the downloads don't have the version in the name,
  ## fix it.
  if [ -f "sbt-launch.jar" ] ; then
      mv "sbt-launch.jar" "$SBT_JAR"
  fi

  ## verify SHA1
  FOUND_SHA1=`openssl sha1 $SBT_JAR | sed -r "s/^.*= (.*)$/\1/"`
  if test "$SBT_SHA1" != "$FOUND_SHA1" ; then
      echo " failed"
      echo " !     Expected SHA1 \"$SBT_SHA1\" but found \"$FOUND_SHA1\" for $SBT_JAR from $SBT_URL"
      exit 1
  fi

  cd $BUILD_DIR
fi

#copy the sbt script (do this every time so we can change it if necessary,
#for example if switching sbt version, or just updates to the script)
cp "$BIN_DIR/../opt/sbt-$SBT_VERSION" "$SBT_BINDIR"/sbt

#echo -n "-----> Installing sbt.boot.properties..."
curl --silent --max-time 10 --location $SBT_PROPS_URL --output "$SBT_BINDIR"/sbt.boot.properties
#echo " done"


#echo -n "-----> Intsalling plugins..."
HEROKU_PLUGIN="Heroku-$SBT_VERSION.scala"
mkdir -p "$SBT_USER_HOME/.sbt/plugins" && curl --silent --max-time 10 --location "http://s3.amazonaws.com/heroku-jvm-langpack-scala/$HEROKU_PLUGIN" --output "$SBT_USER_HOME/.sbt/plugins/$HEROKU_PLUGIN"

HEROKU_PLUGINS_CONFIG="heroku-plugins-$SBT_VERSION.sbt"
mkdir -p "$SBT_USER_HOME/.sbt/plugins" && curl --silent --max-time 10 --location "http://s3.amazonaws.com/heroku-jvm-langpack-scala/$HEROKU_PLUGINS_CONFIG"  --output "$SBT_USER_HOME/.sbt/plugins/$HEROKU_PLUGINS_CONFIG"
#echo " done"

# build app
echo "-----> Running: sbt $SBT_TASKS"
test -e "$SBT_BINDIR"/sbt.boot.properties && PROPS_OPTION="-Dsbt.boot.properties=$SBT_BINDIR/sbt.boot.properties"
HOME="$SBT_USER_HOME_ABSOLUTE" java -Xmx512M -Dfile.encoding=UTF8 -Duser.home="$SBT_USER_HOME_ABSOLUTE" -Dsbt.log.noformat=true -Divy.default.ivy.user.dir="$SBT_USER_HOME_ABSOLUTE/.ivy2" $PROPS_OPTION -jar "$SBT_BINDIR"/$SBT_JAR $SBT_TASKS 2>&1 | sed -u 's/^/       /'
if [ "${PIPESTATUS[*]}" != "0 0" ]; then
  echo " !     Failed to build app with sbt"
  exit 1
fi

if is_play $BUILD_DIR && [ -d $SBT_USER_HOME/.ivy2 ] ; then
  echo "-----> Dropping ivy cache from the slug" 
  rm -rf $SBT_USER_HOME/.ivy2 
fi

# repack cache
mkdir -p $CACHE_DIR
for DIR in $CACHED_DIRS ; do
  rm -rf $CACHE_DIR/$DIR
  mkdir -p $CACHE_DIR/$DIR
  if [ -d $DIR ] ; then
    cp -r $DIR/.  $CACHE_DIR/$DIR
  fi
done

